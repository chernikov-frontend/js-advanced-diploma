import GameController from '../GameController';
import GamePlay from '../GamePlay';
import Swordsman from '../characters/Swordsman';
import Undead from '../characters/Undead';
import Bowman from '../characters/Bowman';
import Vampire from '../characters/Vampire';
import Magician from '../characters/Magician';
import Daemon from '../characters/Daemon';
import GameStateService from '../GameStateService';

// –ú–æ–∫ –¥–ª—è gamePlay
jest.mock('../GamePlay');

const mockCharacter = {
    level: 3,
    attack: 40,
    defence: 10,
    health: 100,
};

const expectedTooltip = 'üéñ 3 ‚öî 40 üõ° 10 ‚ù§ 100';

describe('–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π', () => {
    let gameController;

    beforeEach(() => { 
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GameController —Å –º–æ–∫-–æ–±—ä–µ–∫—Ç–æ–º GamePlay
        gameController = new GameController(new GamePlay(), {});
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', () => {
        const tooltip = gameController.createCharacterTooltip(mockCharacter);
        expect(tooltip).toBe(expectedTooltip);
    });

    const characterTestCases = [
        { CharacterClass: Swordsman, name: '–ú–µ—á–Ω–∏–∫', expectedMoveRange: 4, expectedAttackRange: 1 },
        { CharacterClass: Undead, name: '–°–∫–µ–ª–µ—Ç', expectedMoveRange: 4, expectedAttackRange: 1 },
        { CharacterClass: Bowman, name: '–õ—É—á–Ω–∏–∫', expectedMoveRange: 2, expectedAttackRange: 2 },
        { CharacterClass: Vampire, name: '–í–∞–º–ø–∏—Ä', expectedMoveRange: 2, expectedAttackRange: 2 },
        { CharacterClass: Magician, name: '–ú–∞–≥', expectedMoveRange: 1, expectedAttackRange: 4 },
        { CharacterClass: Daemon, name: '–î–µ–º–æ–Ω', expectedMoveRange: 1, expectedAttackRange: 4 },
    ];

    test.each(characterTestCases)(
        '$name –∏–º–µ–µ—Ç —Ä–∞–¥–∏—É—Å –¥–≤–∏–∂–µ–Ω–∏—è $expectedMoveRange –∏ —Ä–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏ $expectedAttackRange',
        ({ CharacterClass, expectedMoveRange, expectedAttackRange }) => {
            const character = new CharacterClass(1);
            expect(gameController.getMoveRange(character)).toBe(expectedMoveRange);
            expect(gameController.getAttackRange(character)).toBe(expectedAttackRange);
        }
    );

    test.each(characterTestCases)(
        '$name –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞',
        ({ CharacterClass }) => {
            const character = new CharacterClass(1);
            const moveRange = gameController.getMoveRange(character);
            const attackRange = gameController.getAttackRange(character);
            const position = 27; // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–∞ –¥–æ—Å–∫–µ

            const allowedMoves = gameController.calcRange(position, moveRange);
            const allowedAttacks = gameController.calcRange(position, attackRange);

            expect(allowedMoves.length).toBeGreaterThan(0);
            expect(allowedAttacks.length).toBeGreaterThan(0);
        }
    );
});

describe('–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã', () => {
    let gameStateService;
    let gameController;

    beforeEach(() => {
        gameStateService = new GameStateService();
        gameController = new GameController(new GamePlay(), gameStateService);
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
        gameStateService.load = jest.fn(() => ({
            currentLevel: 2,
            currentTurn: 'player',
            positionedCharacters: [],
            maxScore: 50
        }));
        
        gameController.loadGameState();
        expect(gameController.currentLevel).toBe(2);
        expect(gameController.maxScore).toBe(50);
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ', () => {
        gameStateService.load = jest.fn(() => {
            throw new Error('Load failed');
        });

        gameController.loadGameState();
        expect(GamePlay.showError).toHaveBeenCalledWith('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É.');
    });
});
