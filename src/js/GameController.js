import GamePlay from './GamePlay';
import { generateTeam, playerClasses, enemyClasses } from './generators';
import PositionedCharacter from './PositionedCharacter';
import { getTheme } from './themes';
import GameState from './GameState';
import cursors from './cursors';
import Swordsman from './characters/Swordsman';
import Undead from './characters/Undead';
import Bowman from './characters/Bowman';
import Vampire from './characters/Vampire';
import Magician from './characters/Magician';
import Daemon from './characters/Daemon';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = GameState.from({});
    this.currentLevel = 1;
    this.selectedCharacterIndex = null;
    this.selectedCharacter = null; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  init() {
    this.gameState.currentTurn = 'player';
    this.gamePlay.drawUi(getTheme(this.currentLevel));
    this.playerTeam = generateTeam(playerClasses, 1, 2);
    this.enemyTeam = generateTeam(enemyClasses, 1, 2);
    this.positionCharacters();

    this.subscribeToCellClick();
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  subscribeToCellClick() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  // –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
  positionCharacters() {
    const playerPositions = this.generateUniquePositions([0, 1]);
    const enemyPositions = this.generateUniquePositions([6, 7]);

    this.positionedCharacters = [
      ...this.playerTeam.characters.map((character, index) => new PositionedCharacter(character, playerPositions[index])),
      ...this.enemyTeam.characters.map((character, index) => new PositionedCharacter(character, enemyPositions[index])),
    ];

    this.gamePlay.redrawPositions(this.positionedCharacters);
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
  getMoveRange(character) {
    if (character instanceof Swordsman || character instanceof Undead) return 4;
    if (character instanceof Bowman || character instanceof Vampire) return 2;
    if (character instanceof Magician || character instanceof Daemon) return 1;
    return 1;
  }

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∞—Ç–∞–∫–∏
  getAttackRange(character) {
    if (character instanceof Swordsman || character instanceof Undead) return 1;
    if (character instanceof Bowman || character instanceof Vampire) return 2;
    if (character instanceof Magician || character instanceof Daemon) return 4;
    return 1;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —è—á–µ–π–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
  isWithinRadius(currentPos, targetPos, radius) {
    const x1 = currentPos % 8;
    const y1 = Math.floor(currentPos / 8);
    const x2 = targetPos % 8;
    const y2 = Math.floor(targetPos / 8);
    const distance = Math.max(Math.abs(x1 - x2), Math.abs(y1 - y2));
    return distance <= radius;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  onCellClick(index) {
    const character = this.getCharacterAtPosition(index);

    // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏–≥—Ä–æ–∫–∞ ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (character && playerClasses.includes(character.character.constructor)) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if (this.selectedCharacterIndex !== null) {
            this.gamePlay.deselectCell(this.selectedCharacterIndex);
        }

        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        this.gamePlay.selectCell(index);
        this.selectedCharacterIndex = index;
        this.selectedCharacter = character;

    } else if (this.selectedCharacter) {
        const withinAttackRange = character && enemyClasses.includes(character.character.constructor) && this.isWithinRadius(this.selectedCharacter.position, index, this.getAttackRange(this.selectedCharacter.character));
        const withinMoveRange = !character && this.isWithinRadius(this.selectedCharacter.position, index, this.getMoveRange(this.selectedCharacter.character));

        // –ê—Ç–∞–∫–∞
        if (withinAttackRange) {
            this.performAttack(this.selectedCharacter.character, character.character, index).then(() => {
                this.switchTurn();
            });
        }
        // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        else if (withinMoveRange) {
            this.moveCharacter(index);
            this.switchTurn();
        }
        // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        else {
            GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
        }
    } else {
        GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ö–æ–¥–∞');
    }
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ç–∞–∫–∏
  async performAttack(attacker, target, targetIndex) {
    const damage = Math.max(attacker.attack - target.defence, attacker.attack * 0.1);
    target.health -= damage;

    // –í—ã–∑–æ–≤ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É—Ä–æ–Ω–∞
    await this.gamePlay.showDamage(targetIndex, damage);

    if (target.health <= 0) {
        this.positionedCharacters = this.positionedCharacters.filter(
            (posChar) => posChar.character !== target
        );
        console.log(`–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${targetIndex} –ø–æ–±–µ–∂–¥–µ–Ω –∏ —É–¥–∞–ª–µ–Ω —Å –ø–æ–ª—è`);
    }

    this.gamePlay.redrawPositions(this.positionedCharacters);
    return Promise.resolve();  // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç Promise –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–¥–∞
  switchTurn() {
    this.gameState.currentTurn = this.gameState.currentTurn === 'player' ? 'computer' : 'player';
    console.log(`–•–æ–¥ –ø–µ—Ä–µ—à–µ–ª –∫ ${this.gameState.currentTurn}`);
    if (this.gameState.currentTurn === 'computer') {
        this.computerAction();
    }
  }

  // –ù–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ —è—á–µ–π–∫—É
  onCellEnter(index) {
    const positionedCharacter = this.getCharacterAtPosition(index);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if (positionedCharacter) {
        const tooltipMessage = this.createCharacterTooltip(positionedCharacter.character);
        this.gamePlay.showCellTooltip(tooltipMessage, index);
    }

    if (this.selectedCharacter) {
        const selectedChar = this.selectedCharacter.character;

        // –ï—Å–ª–∏ –Ω–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ –≤—Ä–∞–≥–∞ –≤ —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏ - –∫—É—Ä—Å–æ—Ä crosshair, –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–∞—è
        if (
            positionedCharacter &&
            enemyClasses.includes(positionedCharacter.character.constructor) &&
            this.isWithinRadius(this.selectedCharacter.position, index, this.getAttackRange(selectedChar))
        ) {
            this.gamePlay.setCursor(cursors.crosshair);
            this.gamePlay.selectCell(index, 'red');
            return;
        }

        // –ï—Å–ª–∏ –Ω–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É –≤ —Ä–∞–¥–∏—É—Å–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - –∫—É—Ä—Å–æ—Ä pointer, –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∑–µ–ª—ë–Ω–∞—è
        if (!positionedCharacter && this.isWithinRadius(this.selectedCharacter.position, index, this.getMoveRange(selectedChar))) {
            this.gamePlay.setCursor(cursors.pointer);
            this.gamePlay.selectCell(index, 'green');
            return;
        }

        // –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∫—É—Ä—Å–æ—Ä notallowed
        this.gamePlay.setCursor(cursors.notallowed);
    } else {
        // –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω, –Ω–æ –Ω–∞–≤–µ–¥–µ–Ω–æ –Ω–∞ –¥—Ä—É–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ - –∫—É—Ä—Å–æ—Ä pointer
        if (positionedCharacter && playerClasses.includes(positionedCharacter.character.constructor)) {
            this.gamePlay.setCursor(cursors.pointer);
        } else {
            this.gamePlay.setCursor(cursors.notallowed);
        }
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);

    // –°–Ω—è—Ç–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏, –µ—Å–ª–∏ —è—á–µ–π–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂
    if (this.selectedCharacterIndex !== index) {
        this.gamePlay.deselectCell(index);
    }
  }

  moveCharacter(newPosition) {
    this.selectedCharacter.position = newPosition;
    this.gamePlay.deselectCell(this.selectedCharacterIndex);
    this.selectedCharacterIndex = null;
    this.selectedCharacter = null;
    this.gamePlay.redrawPositions(this.positionedCharacters);
  }

  getCharacterAtPosition(index) {
    return this.positionedCharacters.find((posChar) => posChar.position === index);
  }

  createCharacterTooltip(character) {
    return `üéñ ${character.level} ‚öî ${character.attack} üõ° ${character.defence} ‚ù§ ${character.health}`;
  }

  generateUniquePositions(columns) {
    const positions = new Set();
    while (positions.size < 2) {
      const position = Math.floor(Math.random() * 8) * 8 + columns[Math.floor(Math.random() * columns.length)];
      positions.add(position);
    }
    return Array.from(positions);
  }

// –ú–µ—Ç–æ–¥ calcRange –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø—Ä—è–º—ã–º –ª–∏–Ω–∏—è–º –∏ –¥–∏–∞–≥–æ–Ω–∞–ª—è–º
calcRange(position, range) {
  const boardSize = this.gamePlay.boardSize;
  const rangePositions = [];
  const leftBorder = [...Array(boardSize).keys()].map(i => i * boardSize);
  const rightBorder = [...Array(boardSize).keys()].map(i => (i * boardSize) + boardSize - 1);

  const directions = [
    { dx: 1, dy: 0 },   // –≤–ø—Ä–∞–≤–æ
    { dx: -1, dy: 0 },  // –≤–ª–µ–≤–æ
    { dx: 0, dy: 1 },   // –≤–Ω–∏–∑
    { dx: 0, dy: -1 },  // –≤–≤–µ—Ä—Ö
    { dx: 1, dy: 1 },   // –≤–ø—Ä–∞–≤–æ-–≤–Ω–∏–∑ (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
    { dx: -1, dy: -1 }, // –≤–ª–µ–≤–æ-–≤–≤–µ—Ä—Ö (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
    { dx: 1, dy: -1 },  // –≤–ø—Ä–∞–≤–æ-–≤–≤–µ—Ä—Ö (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
    { dx: -1, dy: 1 }   // –≤–ª–µ–≤–æ-–≤–Ω–∏–∑ (–¥–∏–∞–≥–æ–Ω–∞–ª—å)
  ];

  directions.forEach(({ dx, dy }) => {
    for (let step = 1; step <= range; step++) {
      const x = (position % boardSize) + dx * step;
      const y = Math.floor(position / boardSize) + dy * step;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è
      if (x < 0 || x >= boardSize || y < 0 || y >= boardSize) break;

      const newPosition = y * boardSize + x;

      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
      if ((leftBorder.includes(position) && dx === -1) || 
          (rightBorder.includes(position) && dx === 1)) {
        break;
      }

      rangePositions.push(newPosition);
    }
  });

  return rangePositions;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ computerAction —Å —É—á–µ—Ç–æ–º calcRange –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –∑–∞–Ω—è—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
computerAction() {
  const botCharacters = this.positionedCharacters.filter(pc =>
      enemyClasses.includes(pc.character.constructor));
  const playerCharacters = this.positionedCharacters.filter(pc =>
      playerClasses.includes(pc.character.constructor));

  for (const bot of botCharacters) {
    for (const player of playerCharacters) {
      if (this.isWithinRadius(bot.position, player.position, this.getAttackRange(bot.character))) {
        console.log(`–ö–æ–º–ø—å—é—Ç–µ—Ä –∞—Ç–∞–∫—É–µ—Ç ${player.character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ${player.position}`);
        this.performAttack(bot.character, player.character, player.position).then(() => {
          this.switchTurn();
        });
        return;
      }
    }
  }

  for (const bot of botCharacters) {
    let closestPlayer = null;
    let minDistance = Infinity;

    for (const player of playerCharacters) {
      const distance = Math.abs(player.position % 8 - bot.position % 8) +
                       Math.abs(Math.floor(player.position / 8) - Math.floor(bot.position / 8));
      if (distance < minDistance) {
        minDistance = distance;
        closestPlayer = player;
      }
    }

    if (closestPlayer) {
      const botMoves = this.calcRange(bot.position, this.getMoveRange(bot.character))
          .filter(move => !this.positionedCharacters.some(pc => pc.position === move));

      const targetMove = botMoves.find(move =>
          this.isWithinRadius(move, closestPlayer.position, this.getMoveRange(bot.character))
      );

      if (targetMove !== undefined) {
        console.log(`–ö–æ–º–ø—å—é—Ç–µ—Ä –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç ${bot.character.constructor.name} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é ${targetMove}`);
        bot.position = targetMove;
        this.gamePlay.redrawPositions(this.positionedCharacters);
        this.switchTurn();
        return;
      }
    }
  }
}

  }
  
