import GamePlay from './GamePlay';
import { generateTeam, playerClasses, enemyClasses } from './generators';
import PositionedCharacter from './PositionedCharacter';
import { getTheme } from './themes';
import GameState from './GameState';
import cursors from './cursors';
import { isMoveAllowed, isAttackAllowed } from './characterUtils';

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.gameState = GameState.from({});
    this.currentLevel = 1;
    this.selectedCharacterIndex = null;
    this.selectedCharacter = null; // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  }

  init() {
    this.gameState.currentTurn = 'player';
    this.gamePlay.drawUi(getTheme(this.currentLevel));
    this.playerTeam = generateTeam(playerClasses, 1, 2);
    this.enemyTeam = generateTeam(enemyClasses, 1, 2);
    this.positionCharacters();

    this.subscribeToCellClick();
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  subscribeToCellClick() {
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));
  }

  positionCharacters() {
    const playerPositions = this.generateUniquePositions([0, 1]);
    const enemyPositions = this.generateUniquePositions([6, 7]);

    this.positionedCharacters = [
      ...this.playerTeam.characters.map((character, index) => new PositionedCharacter(character, playerPositions[index])),
      ...this.enemyTeam.characters.map((character, index) => new PositionedCharacter(character, enemyPositions[index])),
    ];

    this.gamePlay.redrawPositions(this.positionedCharacters);
  }

  onCellClick(index) {
    const character = this.getCharacterAtPosition(index);
  
    // –ï—Å–ª–∏ –∫–ª–∏–∫ –ø–æ —è—á–µ–π–∫–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –∏–≥—Ä–æ–∫–∞ ‚Äî –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    if (character && playerClasses.includes(character.character.constructor)) {
      if (this.selectedCharacterIndex !== null) {
        this.gamePlay.deselectCell(this.selectedCharacterIndex); // –°–Ω—è—Ç–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      }
  
      this.gamePlay.selectCell(index); // –í—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.selectedCharacterIndex = index; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.selectedCharacter = character; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞—Ç–∞–∫–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
    } else if (
      this.selectedCharacter &&
      character && // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–ª–µ–≤–∞—è —è—á–µ–π–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      enemyClasses.includes(character.character.constructor) &&
      isAttackAllowed(this.selectedCharacter.character, this.selectedCharacter.position, index)
    ) {
      this.performAttack(this.selectedCharacter.character, character.character, index); // –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫—É
      this.switchTurn(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
  
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —è—á–µ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ —Å–≤–æ–±–æ–¥–Ω–∞, –ø–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    } else if (
      this.selectedCharacter &&
      !character && // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞
      isMoveAllowed(this.selectedCharacter.character, this.selectedCharacter.position, index)
    ) {
      this.moveCharacter(index); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
      this.switchTurn(); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
  
    } else {
      GamePlay.showError('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–ª–∏ –∞—Ç–∞–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞');
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Ç–∞–∫–∏
  async performAttack(attacker, target, targetIndex) {
    const damage = Math.max(attacker.attack - target.defence, attacker.attack * 0.1);
    target.health -= damage;

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await this.gamePlay.showDamage(targetIndex, damage);

    // –ï—Å–ª–∏ —Ü–µ–ª—å –ø–æ–≥–∏–±–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    if (target.health <= 0) {
      this.positionedCharacters = this.positionedCharacters.filter(
        (positionedCharacter) => positionedCharacter.character !== target
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ—Å–ª–µ –∞—Ç–∞–∫–∏
    this.gamePlay.redrawPositions(this.positionedCharacters);
  }

  onCellEnter(index) {
    const positionedCharacter = this.getCharacterAtPosition(index);
  
    // –ï—Å–ª–∏ –Ω–∞–≤–µ–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    if (positionedCharacter) {
      const tooltipMessage = this.createCharacterTooltip(positionedCharacter.character);
      this.gamePlay.showCellTooltip(tooltipMessage, index);
    }
  
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    if (positionedCharacter && playerClasses.includes(positionedCharacter.character.constructor)) {
      // –ù–∞–≤–µ–¥–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–≥—Ä–æ–∫–∞ - –∫—É—Ä—Å–æ—Ä "pointer" –¥–ª—è –≤—ã–±–æ—Ä–∞
      this.gamePlay.setCursor(cursors.pointer);
    } else if (
      this.selectedCharacterIndex !== null &&
      positionedCharacter && // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
      enemyClasses.includes(positionedCharacter.character.constructor) && // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫
      isAttackAllowed(this.selectedCharacter.character, this.selectedCharacter.position, index) // –í —Ä–∞–¥–∏—É—Å–µ –∞—Ç–∞–∫–∏
    ) {
      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∫—Ä–∞—Å–Ω—ã–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
      this.gamePlay.setCursor(cursors.crosshair);
      this.gamePlay.selectCell(index, 'red');
    } else if (
      this.selectedCharacterIndex !== null &&
      isMoveAllowed(this.selectedCharacter.character, this.selectedCharacter.position, index)
    ) {
      // –ï—Å–ª–∏ —è—á–µ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è - –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –∑–µ–ª–µ–Ω—ã–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä "pointer"
      this.gamePlay.setCursor(cursors.pointer);
      this.gamePlay.selectCell(index, 'green');
    } else {
      // –ò–Ω–∞—á–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ - –∫—É—Ä—Å–æ—Ä "notallowed"
      this.gamePlay.setCursor(cursors.notallowed);
    }
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index); // –°–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ —É—Ö–æ–¥–µ —Å —è—á–µ–π–∫–∏
    this.gamePlay.deselectCell(index); // –°–Ω—è—Ç–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —è—á–µ–π–∫–∏
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  moveCharacter(newPosition) {
    this.selectedCharacter.position = newPosition; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    this.gamePlay.deselectCell(this.selectedCharacterIndex); // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
    this.selectedCharacterIndex = null;
    this.selectedCharacter = null;
    this.gamePlay.redrawPositions(this.positionedCharacters); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ö–æ–¥–∞
  switchTurn() {
    this.gameState.currentTurn = this.gameState.currentTurn === 'player' ? 'computer' : 'player';
  }

  getCharacterAtPosition(index) {
    return this.positionedCharacters.find((positionedCharacter) => positionedCharacter.position === index);
  }

  createCharacterTooltip(character) {
    return `üéñ ${character.level} ‚öî ${character.attack} üõ° ${character.defence} ‚ù§ ${character.health}`;
  }

  generateUniquePositions(columns) {
    const positions = new Set();
    while (positions.size < 2) {
      const position = Math.floor(Math.random() * 8) * 8 + columns[Math.floor(Math.random() * columns.length)];
      positions.add(position);
    }
    return Array.from(positions);
  }
}
